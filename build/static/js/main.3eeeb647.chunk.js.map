{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","country","active","carddetails","style","styles","infected","text","value","bottomText","className","container","Grid","spacing","justify","map","detail","index","item","component","Card","xs","md","cx","key","margin","padding","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","toLocaleTimeString","url","fetchData","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","lineChart","useState","setDailyData","useEffect","fetchAPI","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","hoverBackgroundColor","options","legend","display","title","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3eeeb647.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\",\"active\":\"Cards_active__3_M63\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nconst Cards = ({\n  data: { confirmed, recovered, deaths, lastUpdate },\n  country,\n}) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  const active = confirmed[\"value\"] - recovered[\"value\"] - deaths[\"value\"];\n  let carddetails = [\n    {\n      style: styles.infected,\n      text: \"Infected\",\n      value: confirmed.value,\n      bottomText: \"Number of infect cases of COVID-19\",\n    },\n    {\n      style: styles.recovered,\n      text: \"Recovered\",\n      value: recovered.value,\n      bottomText: \"Number of recoveries from COVID-19\",\n    },\n    {\n      style: styles.deaths,\n      text: \"Deaths\",\n      value: deaths.value,\n      bottomText: \"Number of deaths caused by COVID-19\",\n    },\n    {\n      style: styles.active,\n      text: \"Active\",\n      value: active,\n      bottomText: \"Number of active cases of COVID-19\",\n    },\n  ];\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        {carddetails.map((detail, index) => (\n          <Grid\n            item\n            component={Card}\n            xs={12}\n            md={2}\n            className={cx(styles.Card, detail.style)}\n            key={index}\n            style={{ margin: \"0px 23.675px\", padding: \"12px\" }}\n          >\n            <CardContent>\n              <Typography color=\"textPrimary\" gutterBottom>\n                <b>{detail.text}</b>\n              </Typography>\n              <Typography variant=\"h5\">\n                <CountUp\n                  start={0}\n                  end={detail.value}\n                  duration={2}\n                  separator=\",\"\n                />\n              </Typography>\n              <Typography color=\"textPrimary\">Last Updated at : </Typography>\n              <Typography color=\"textSecondary\" variant=\"body2\">\n                {new Date(lastUpdate).toDateString()}\n              </Typography>\n              <Typography color=\"textSecondary\" variant=\"body2\">\n                {new Date(lastUpdate).toLocaleTimeString()}\n              </Typography>\n              <Typography variant=\"body2\">{detail.bottomText}</Typography>\n              <Typography color=\"textPrimary\"> {country} </Typography>\n            </CardContent>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    return {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  let lineChart;\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n  if(dailyData){\n  lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255,0,0,0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n    }\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\", \"Active\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n              \"rgba(242, 234, 0, 0.5)\",\n            ],\n            hoverBackgroundColor: [\n              \"rgba(0, 77, 153)\",\n              \"rgba(30, 102, 49)\",\n              \"rgba(255, 51, 51)\",\n              \"rgba(204, 153, 0)\",\n            ],\n            data: [\n              confirmed.value,\n              recovered.value,\n              deaths.value,\n              confirmed.value - (recovered.value + deaths.value),\n            ],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport styles from \"./CountryPicker.module.css\";\nimport { fetchCountries } from \"../../api\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries());\n    };\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, key) => (\n          <option key={key} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./Components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport coronaImage from \"./images/image.png\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\n        <br />\n        <text>\n          <b>Global and Country Wise Cases of Corona Virus</b>\n        </text>\n        <br />\n        <text>\n          <i>(For a Particular country, select a Country from below)</i>\n        </text>\n        <br />\n        <br />\n        <Cards data={data} country={country} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Cards, CountryPicker, Chart } from \"./Components\";\n// import { fetchData } from \"./api/\";\n// import styles from \"./App.module.css\";\n// import Footer from \"./Components/Footer/Footer\";\n// import image from \"./images/image.png\";\n\n// const App = () => {\n//   const [data, setData] = useState({});\n//   const [country, setCountry] = useState();\n\n//   const handleCountryChange = async (country) => {\n//     const data = await fetchData(country);\n//     setCountry(country);\n//     setData(data);\n//   };\n\n//   useEffect(() => {\n//     async function loadData() {\n//       const data = await fetchData();\n//       setData({ data });\n//     }\n//     loadData();\n//   }, []);\n\n//   console.log(data);\n\n//   return (\n//     <div className={styles.container}>\n//       <img className={styles.image} src={image} alt=\"COVID-19\" />\n//       <br />\n//       <text>\n//         <b>Global and Country Wise Cases of Corona Virus</b>\n//       </text>\n//       <br />\n//       <text>\n//         <i>(For a Particlar select a Country from below)</i>\n//       </text>\n//       <br />\n//       <br />\n//       <Cards data={data} country={country} />\n//       <CountryPicker handleCountryChange={handleCountryChange} />\n//       <Chart data={data} country={country} />\n//       <Footer />\n//     </div>\n//   );\n// };\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\",\"image\":\"Chart_image__3E_3w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__4LMvE\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}